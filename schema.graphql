`
  scalar DateTime

  enum PhotoCategory {
    SELFIE
    PORTRAIT
    ACTION
    LANDSCAPE
    GRAPHIC
  }

  input PhotoFilter {
    category: PhotoCategory
    createdBetween: DateRange
    taggedUsers: [ID!]
    searchText: String
  }

  input DateRange {
    start: DateTime!
    end: DateTime!
  }

  input DataPage {
    first: Int = 25
    start: Int = 0
  }

  input DataSort {
    sort: SortDirection = DESCENDING
    sortBy: SortablePhotoField = created
  }
  
  input PostPhotoInput {
    name: String!
    description: String
    category: PhotoCategory=PORTRAIT
  }

  type User {
    githubLogin: ID!
    name: String
    avatar: String
    postedPhotos(filter:PhotoFilter paging:DataPage sorting:DataSort): [Photo!]!
    inPhotos(filter: PhotoFilter paging:DataPage sorting:DataSort): [Photo!]!
    friends: [Friendship!]!
  }

  type Friendship {
    friend_a: User!
    friend_b: User!
    howLong: Int!
    whereWeMet: Location
  }

  type Photo {
    id: ID!
    name: String!
    url: String!
    description: String
    created: DateTime!
    category: PhotoCategory!
    postedBy: User!
    taggedUsers(sorting:DataSort): [User!]!
  }

  type AuthPayload {
    user: User!
    token: String!
  }

  type Query {
    totalPhotos: Int!
    allPhotos(filter:PhotoFilter paging:DataPage sorting:DataSort): [Photo!]!
    totalUsers: Int!
    allUsers(paging:DataPage sorting:DataSort): [User!]!
    User(githubLogin: ID!): User!
    Photo(id: ID!): Photo!
  }

  type Mutation {
    postPhoto(input: PostPhotoInput!): Photo!
    githubAuth(code: String!): AuthPayload!
  }

  type Subscription {
    newPhoto(category: PhotoCategory): Photo!
    newUser: User!
  }

  schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
  }
`